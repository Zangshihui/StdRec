import h5py
import numpy as np
from StdRec import readgadget, readfof

class Base(object):
    def __init__(self, BoxSize = 1000, NMesh = 512, Omega_m0 = 0.3175, Hubble0 = 67.11, redshift = 0, RSD = False, *args, **kwargs):
        super(Base, self).__init__()
        """
        Define the basic variable
        """
        self.BoxSize = BoxSize
        self.NMesh = NMesh
        self.Omega_m0 = Omega_m0
        self.Omega_Lambda0 = 1 - Omega_m0
        self.redshift = redshift
        self.a = 1/(1 + redshift)
        self.Hubble0 = Hubble0
        self.Hubble = Hubble0*(Omega_m0*(1 + redshift)**3 + 1 - Omega_m0)**0.5
        self.RSD = RSD
        self.ParameterSet()
        print('Cosmology: BoxSize is %d; NMesh is %d; Omega_m0 is %f; Hubble0 is %f; redshift is %f; RSD is %d'%(BoxSize, NMesh, Omega_m0, Hubble0, redshift, RSD))
        
    def GetDensity(self):
        """
        Return the density field 1+delta
        """
        return self.deltaX + 1
    
    def GetPosition(self):
        """
        Return the position of particles
        """
        return self.Position
    
    def GetPosition0(self):
        """
        Return the origin position
        """
        return self.Position0
    
    def GetGrowthfactor(self):
        """
        Return the growth factor
        """
        return self.f
        
    def GetHubble(self):
        """
        return the Hubble constant
        """
        return self.Hubble
        
    def GetRecDensity(self):
        """
        Return the estimated density field
        """
        return self.deltaX0 + 1
    
    def GetDis(self):
        """
        Return the displacement field
        """
        temp = np.empty([self.NMesh, self.NMesh, self.NMesh, 3])
        temp[:, :, :, 0] = self.dx
        temp[:, :, :, 1] = self.dy
        temp[:, :, :, 2] = self.dz
        return temp
        
    def ParameterSet(self):
        """
        Set Parameters 
        """
        # Calculate Mesh Size
        self.H = self.BoxSize/self.NMesh
        # Wave Number Parameters
        self.fn = np.fft.fftfreq(self.NMesh, 1. / self.NMesh).astype(np.float32)
        self.rfn = np.fft.rfftfreq(self.NMesh, 1. / self.NMesh).astype(np.float32)
        self.fnx = (self.fn[:, None, None]
                  + np.zeros(self.NMesh, dtype = np.float32)[None, :, None]
                  + np.zeros(int(self.NMesh/2 + 1), dtype = np.float32)[None, None, :])
        self.fny = (np.zeros(self.NMesh, dtype = np.float32)[:, None, None]
                  + self.fn[None, :, None] 
                  + np.zeros(int(self.NMesh/2 + 1), dtype = np.float32)[None, None, :])
        self.fnz = (np.zeros(self.NMesh, dtype = np.float32)[:, None, None]
                  + np.zeros(self.NMesh, dtype = np.float32)[None, :, None]
                  + self.rfn[None, None, :])
        self.k_ind = ((self.fn[:, None, None]**2.
                  + self.fn[None, :, None]**2.
                  + self.rfn[None, None, :]**2.)**(0.5)).astype(np.float32)
        self.k_ind[0,0,0] = 1
        self.mu_ind = abs(self.fnz)/self.k_ind
        self.mu_ind[0,0,0] = 0
        self.k_ind[0,0,0] = 0
        # Fundamental Frequency and Nyquist Frequency
        self.Kf = 2*np.pi/self.BoxSize
        self.Knyq = np.pi*self.NMesh/self.BoxSize
        self.Growth()
        
    def Growth(self):
        Omega_m = self.Omega_m0*(1 + self.redshift)**3/(self.Omega_Lambda0 + self.Omega_m0*(1 + self.redshift)**3)
        self.f = (Omega_m)**0.55
        
    def Readsnapshots(self, snapPATH):
        """
        Read the snapshots generated by Gadget
        """
        snapshot = snapPATH
        ptype   = [1] 
        self.Position = readgadget.read_block(snapshot, "POS ", ptype)/1e3
        self.Velocity = readgadget.read_block(snapshot, "VEL ", ptype)
        self.Size = self.Position.shape[0]
        self.Position = self.Position.astype(np.float32)
        self.Velocity = self.Velocity.astype(np.float32)
        del self.Velocity
        if self.RSD == True:
            self.Position[:, 2] += (self.Hubble0/100)*self.Velocity[:, 2]/((1/(self.redshift + 1)) * self.Hubble)
            self.Position = self.Position%self.BoxSize

    def Readhalo(self, mode = 'Quijote', HaloPATH = None):
        """
        Read Halos
        """
        if mode == 'Quijote':
            self.H = self.BoxSize/self.NMesh
            snap_dict = {0:4, 0.5:3, 1.0:2, 2.0:1, 3.0:3}
            snapnum = snap_dict[self.redshift]
#             redshift = z_dict[snapnum]
            FoF = readfof.FoF_catalog(HaloPATH, snapnum, long_ids=False,
                                      swap=False, SFR=False, read_IDs=False)
            self.Position = FoF.GroupPos/1000            #Halo positions in Mpc/h
            self.Size = self.Position.shape[0]
            self.Mass = np.ones(self.Size)
            self.Velocity = FoF.GroupVel*(1.0+self.redshift) 
            if self.RSD == True:
                self.Position[:, 2] += (self.Hubble0/100)*self.Velocity[:, 2]/((1/(self.redshift + 1)) * self.Hubble)
                self.Position = self.Position%self.BoxSize